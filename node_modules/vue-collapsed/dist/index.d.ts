import type { AllowedComponentProps } from 'vue';
import type { ComponentCustomProps } from 'vue';
import type { ComponentOptionsMixin } from 'vue';
import type { ComputedRef } from 'vue';
import type { CSSProperties } from 'vue';
import type { DefineComponent } from 'vue';
import type { ExtractPropTypes } from 'vue';
import type { Ref } from 'vue';
import type { ShallowRef } from 'vue';
import type { VNodeProps } from 'vue';

export declare const Collapse: DefineComponent<{
    when: {
        type: BooleanConstructor;
        required: true;
    };
    baseHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    as: {
        type: null;
        required: false;
        default: string;
    };
}, {
    props: any;
    emit: (event: "expanded" | "collapsed" | "collapse" | "expand", ...args: any[]) => void;
    isExpanded: Ref<any>;
    baseHeight: Ref<any>;
    baseHeightStyles: ComputedRef<{
        overflow: string;
        height: string;
    }>;
    collapsedStyles: ComputedRef<{
        overflow: string;
        height: string;
        padding: 0;
    } | {
        display: string;
        padding: 0;
    }>;
    collapseRef: Ref<HTMLElement | null>;
    state: Ref<TransitionState>;
    style: ShallowRef<CSSProperties>;
    autoDuration: Ref<number>;
    autoDurationVar: ComputedRef<{
        "--vc-auto-duration": string;
    }>;
    onExpanded: () => void;
    onCollapsed: () => void;
    onTransitionEnd: (event: TransitionEvent) => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("expanded" | "collapsed" | "collapse" | "expand")[], "expanded" | "collapsed" | "collapse" | "expand", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    when: {
        type: BooleanConstructor;
        required: true;
    };
    baseHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    as: {
        type: null;
        required: false;
        default: string;
    };
}>> & {
    onExpanded?: ((...args: any[]) => any) | undefined;
    onCollapsed?: ((...args: any[]) => any) | undefined;
    onCollapse?: ((...args: any[]) => any) | undefined;
    onExpand?: ((...args: any[]) => any) | undefined;
}, {
    baseHeight: number;
    as: any;
}, {}>;

declare type TransitionState = 'expanding' | 'expanded' | 'collapsing' | 'collapsed';

export { }
