import { defineComponent as S, toRef as y, computed as d, ref as c, shallowRef as z, onMounted as A, watch as C, openBlock as B, createBlock as F, resolveDynamicComponent as M, normalizeStyle as R, withCtx as q, renderSlot as N, normalizeProps as P, guardReactiveProps as D } from "vue";
const _ = "--vc-auto-duration", T = `height var(${_}) cubic-bezier(0.33, 1, 0.68, 1)`, r = { padding: 0 }, j = { position: "absolute", width: "1px", height: "1px", padding: "0", margin: "-1px", overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", border: "0" };
function b(t) {
  return { height: `${(t == null ? void 0 : t.scrollHeight) ?? 0}px` };
}
function $(t) {
  if (!t)
    return {};
  const { transition: n } = getComputedStyle(t);
  return n === "all 0s ease 0s" ? { transition: T } : { transition: n };
}
function H(t) {
  if (!t)
    return !0;
  const { transition: n } = getComputedStyle(t);
  return window.matchMedia("(prefers-reduced-motion: reduce)").matches || n.includes("none") || n.includes("height 0s");
}
S({ inheritAttrs: !0 });
const G = S({ __name: "Collapse", props: { when: { type: Boolean }, baseHeight: { default: 0 }, as: { default: "div" } }, emits: ["collapse", "expand", "collapsed", "expanded"], setup(t, { emit: n }) {
  const v = t, u = y(v, "when"), o = y(v, "baseHeight"), p = d(() => ({ overflow: "hidden", height: `${o.value}px` })), h = d(() => ({ ...r, ...o.value === 0 ? { display: "none" } : p.value })), l = c(null), i = c(u.value ? "expanded" : "collapsed"), e = z({}), g = c(300), f = d(() => ({ [_]: `${g.value}ms` }));
  function m() {
    e.value = r, i.value = "expanded", n("expanded");
  }
  function x() {
    e.value = h.value, i.value = "collapsed", n("collapsed");
  }
  function k(a) {
    var s, w;
    a.target === l.value && a.propertyName === "height" && (u.value ? ((s = l.value) == null ? void 0 : s.scrollHeight) === parseFloat(a.target.style.height) && m() : ((w = l.value) == null ? void 0 : w.style.height) === `${o.value}px` && x());
  }
  return A(() => {
    l.value && (u.value || o.value !== 0 || (e.value = j), g.value = function(a = 0) {
      if (a === 0)
        return 0;
      const s = a / 36;
      return Math.round(10 * (4 + 15 * s ** 0.25 + s / 5));
    }(l.value.scrollHeight - o.value), e.value = u.value ? r : h.value);
  }), C(u, (a) => {
    if (a) {
      if (H(l.value))
        return m();
      i.value = "expanding", n("expand"), e.value = { ...r, ...p.value, ...f.value, willChange: "height" }, requestAnimationFrame(() => {
        e.value = { ...e.value, ...b(l.value), ...$(l.value) };
      });
    } else {
      if (H(l.value))
        return x();
      i.value = "collapsing", n("collapse"), e.value = { ...e.value, ...f.value, ...b(l.value), willChange: "height" }, requestAnimationFrame(() => {
        e.value = { ...e.value, ...p.value, ...$(l.value) };
      });
    }
  }), C(o, (a) => {
    u.value || (e.value = { ...e.value, ...a === 0 ? { display: "none" } : { transition: "none", height: `${a}px` } });
  }), (a, s) => (B(), F(M(v.as), { ref_key: "collapseRef", ref: l, style: R(e.value), onTransitionend: k, "data-collapse": i.value }, { default: q(() => [N(a.$slots, "default", P(D({ state: i.value })))]), _: 3 }, 40, ["style", "data-collapse"]));
} });
export {
  G as Collapse
};
